@page "/"
@using Applications.Shared
@using Azure.Messaging.ServiceBus
@using Microsoft.Extensions.Azure
@using System.Text.Json
@using StackExchange.Redis
@inject IAzureClientFactory<ServiceBusSender> SenderFactory
@inject ConnectionMultiplexer ConnectionMultiplexer

<MudChart ChartType="ChartType.Bar" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>


@foreach(var practiceManager in Enum.GetValues<PracticeManagerEnum>())
{
    <MudButton Class="my-10" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" @onclick="() => SendMessagesAsync(practiceManager)">@practiceManager</MudButton>
}

@code {
    private const int numOfMessages = 100;
    private Dictionary<string, long> _votes = new ();
    public string[] XAxisLabels;
    private static PeriodicTimer _timer;
    private int Index = -1;
    public List<ChartSeries> Series;
    
    protected override async Task OnInitializedAsync()
    {
        XAxisLabels = Enum.GetNames<PracticeManagerEnum>();
        Series = Enum.GetNames<PracticeManagerEnum>()
            .Select(pm => new ChartSeries() { Name = pm, Data = new double[0] })
            .ToList();
        _timer = new PeriodicTimer(TimeSpan.FromSeconds(1));
        await base.OnInitializedAsync();
        CheckForUpdates();
    }
    
    private async Task CheckForUpdates()
    {
        while (await _timer.WaitForNextTickAsync())
        {
            foreach (var value in Enum.GetNames<PracticeManagerEnum>())
            {
                var database = ConnectionMultiplexer.GetDatabase();
                var numberOfVotes = database.StringGet(value);

                Series.Where(x => x.Name == value).First().Data = new[] { Convert.ToDouble(numberOfVotes) };

                if (!_votes.Keys.Contains(value))
                {
                    _votes.TryAdd(value, Convert.ToInt64(numberOfVotes));
                }
                else
                {
                    _votes[value] = Convert.ToInt64(numberOfVotes.ToString());
                }
            }
            
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }
    
    private async Task SendMessagesAsync(PracticeManagerEnum practiceManager)
    {
        var sender = SenderFactory.CreateClient("servicebus");

        using ServiceBusMessageBatch messageBatch = await sender.CreateMessageBatchAsync();

        for (var i = 1; i <= numOfMessages; i++)
        {
            if (!messageBatch.TryAddMessage(new ServiceBusMessage(JsonSerializer.Serialize(new Vote {PracticeManager = practiceManager}))))
            {
                throw new Exception($"The message {i} is too large to fit in the batch.");
            }
        }
        
        await sender.SendMessagesAsync(messageBatch);
        Console.WriteLine($"A batch of {numOfMessages} messages has been published to the queue.");
    }
}