name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "master" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3 # v3.0.0

      - name: Log into registry 
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ vars.DOCKERUSERNAME }}
          password: ${{ secrets.DOCKERPASSWORD }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push-application
        uses: docker/build-push-action@v5 # v5.0.0
        with:
          context: applications/Applications.Front
          push: ${{ github.event_name != 'pull_request' }}
          tags: "thibaultlesuisse/keda-application:1.5"
          file: "applications/Applications.Front/Dockerfile"
          cache-from: type=Docker
          cache-to: type=gha,mode=max
      
      - name: Build and push Docker image
        id: build-and-push-function
        uses: docker/build-push-action@v5 # v5.0.0
        with:
          context: applications/Applications.Functions
          push: ${{ github.event_name != 'pull_request' }}
          tags: "thibaultlesuisse/keda-function:1.5"
          file: "applications/Applications.Functions/Docker/Dockerfile"
          cache-from: type=Docker
          cache-to: type=gha,mode=max
      
      - name: Print variables
        run: |
          echo ${{ steps.build-and-push-function.outputs.Metadata }}
          apt install jq
          echo ${{ steps.build-and-push-function.outputs.Metadata }} | jq .["image.name"]


